{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Flower.svelte",
    "../../CanvasVisual.svelte",
    "../../SVGVisualBelow.svelte",
    "../../SVGVisualOver.svelte",
    "../../Continents.svelte",
    "../../CentralLineChart.svelte",
    "../../CountryHighlighter.svelte",
    "../../YearLabels.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as d3 from 'd3';\n\n\timport Flower from './flower/Flower.svelte';\n\n\tconst years = [1998, 2008, 2018];\n\n\tlet data;\n\n\tasync function load() {\n\t\tdata = await d3.csv('/child_mortality.csv', d => {\n\t\t\tconst dataArr = [];\n\t\t\tconst returnObj = {\n\t\t\t\tiso: d.iso,\n\t\t\t\tcountry: d.country,\n\t\t\t\treduction: +d.reduction,\n\t\t\t\tcontinent: d.continent\n\t\t\t};\n\t\t\tfor (let key in d) {\n\t\t\t\tif (key.match('^19|^20')) dataArr.push({year: +key, value: +d[key]});\n\t\t\t}\n\t\t\treturnObj['dataArr'] = dataArr;\n\t\t\treturn returnObj;\n\t\t});\n\t}\n\n\tload();\n</script>\n\n<div id=\"visual\">\n\t{#if data}\n\t\t<Flower {data}\n\t\t\t\t\t\t{years} />\n\t{/if}\n</div>\n\n<style>\n\t#visual {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  import CanvasVisual from './CanvasVisual.svelte';\n  import SVGVisualBelow from './SVGVisualBelow.svelte';\n  import SVGVisualOver from './SVGVisualOver.svelte';\n\n  export let data;\n  export let years;\n\n  const offset = 10;\n  const angleOffset = 0;\n\n  let selectedIso;\n\n  // Dimensions\n  let rawWidth = offset;\n  let rawHeight = offset;\n\n  // Scales\n  let scYearColor, scCountryAngle, scYearRadius, scMortRate, scReduction;\n\n  function initScales(minDim) {\n    scYearColor = d3.scaleOrdinal()\n      .domain(years)\n      .range(['#F40000', 'rgb(236, 54, 9)', 'rgb(245, 120, 86)']);\n\n    scCountryAngle = d3.scaleOrdinal()\n      .domain(data.map(d => d.iso))\n      .range(d3.range(angleOffset, 2 * Math.PI - angleOffset, (2 * Math.PI - 2 * angleOffset) / data.length));\n\n    scYearRadius = d3.scaleLinear()\n      .domain([years[0], years[years.length - 1]])\n      .range([minDim / 5, minDim / 2.4 - padding]);\n\n    scMortRate = d3.scaleLinear()\n      .domain([0, 1.2 * d3.max([].concat(...data.map(d => d.dataArr.filter(d => years.includes(d.year)).map(d => d.value))))])\n      .range([0, minDim / 15]);\n\n    scReduction = d3.scaleLinear()\n      .domain(d3.extent(data.map(d => d.reduction)))\n      .range([Math.min(scYearRadius(years[years.length - 1]) + reductionOffset, minDim / 2 - padding), minDim / 2 - padding]);\n  }\n\n  $: width = rawWidth - offset;\n  $: height = rawHeight - offset;\n  $: minDim = Math.min(width, height);\n  $: padding = minDim / 40;\n  $: reductionOffset = minDim / 40;\n\n  $: if (data && years) initScales(minDim);\n</script>\n\n<svelte:body on:click={() => selectedIso = undefined}/>\n\n<div class=\"wrapper\" bind:offsetWidth={rawWidth} bind:offsetHeight={rawHeight}>\n  {#if (minDim > 0)}\n  <SVGVisualBelow width={width}\n                  height={height}\n                  offset={offset}\n                  data={data}\n                  years={years}\n                  scCountryAngle={scCountryAngle}\n                  scYearRadius={scYearRadius}\n                  scReduction={scReduction}\n                  selectedIso={selectedIso} />\n  <CanvasVisual width={width}\n              height={height}\n              offset={offset}\n              data={data}\n              years={years}\n              scYearColor={scYearColor}\n              scCountryAngle={scCountryAngle}\n              scYearRadius={scYearRadius}\n              scMortRate={scMortRate}\n              selectedIso={selectedIso} />\n  <SVGVisualOver width={width}\n                 height={height}\n                 offset={offset}\n                 data={data}\n                 years={years}\n                 scCountryAngle={scCountryAngle}\n                 scYearRadius={scYearRadius}\n                 scReduction={scReduction}\n                 scMortRate={scMortRate}\n                 selectedIso={selectedIso}\n                 on:isochanged={(e) => selectedIso = e.detail} />\n  {/if}\n</div>\n\n<style>\n  .wrapper {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scYearColor;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scMortRate;\n  export let selectedIso;\n\n  const canvasScaleFactor = 2;\n\n  // Elements\n  let canvas, ctx;\n\n  function init() {\n    canvas.width = canvasScaleFactor * width;\n    canvas.height = canvasScaleFactor * height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.style.margin = `${offset / 2}px`;\n\n    ctx.scale(canvasScaleFactor, canvasScaleFactor);\n    ctx.translate(width / 2, height / 2);\n  }\n\n  function draw(width, height, selectedIso) {\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n    ctx.globalAlpha = selectedIso ? 0.1 : 0.4;\n\n    years.forEach(year => {\n      ctx.fillStyle = scYearColor(year);\n      data.forEach(d => {\n        const yearData = d.dataArr.find(d => d.year === year);\n        const x = Math.sin(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        const y = Math.cos(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        ctx.beginPath();\n        ctx.arc(x, y, scMortRate(yearData.value), 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    });\n  }\n\n  onMount(() => {\n    ctx = canvas.getContext('2d');\n  });\n\n  $: if (ctx) init(width, height);\n  $: if (ctx && data) draw(width, height, selectedIso);\n</script>\n\n<canvas class=\"canvas-visual\"\n        bind:this={canvas}></canvas>\n\n<style>\n  canvas {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import Continents from './Continents.svelte';\n  import ReductionPath from './ReductionPath.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n  export let selectedIso;\n\n  let continentsData;\n\n  function loadContinentsData() {\n    const uniqueContinents = [...new Set(data.map(d => d.continent))];\n    continentsData = uniqueContinents.map(continent => {\n      const raw = data.map(d => d.continent);\n      return {\n        startAngle: scCountryAngle(data[raw.indexOf(continent)].iso),\n        endAngle: scCountryAngle(data[raw.lastIndexOf(continent)].iso),\n        continent\n      };\n    });\n  }\n\n  // Prepare data for continent labels\n  $: if (data) loadContinentsData();\n</script>\n\n<svg class=\"svg-visual\"\n     width={width}\n     height={height}\n     style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <ReductionPath width={width}\n                 height={height}\n                 data={data}\n                 scCountryAngle={scCountryAngle}\n                 scReduction={scReduction} />\n  <Continents width={width}\n              height={height}\n              data={continentsData}\n              years={years}\n              scYearRadius={scYearRadius} />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import YearLabels from './YearLabels.svelte';\n  import CentralLineChart from './CentralLineChart.svelte';\n  import CountryLabels from './CountryLabels.svelte';\n  import CountryHighlighter from './CountryHighlighter.svelte';\n  import IsoDetector from './IsoDetector.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n  export let scMortRate;\n  export let selectedIso;\n\n  $: innerRadius = scYearRadius(years[0]) * 0.62;\n  $: countryRadius = scReduction.range()[1];\n</script>\n\n<svg class=\"svg-visual\"\n     width={width}\n     height={height}\n     style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <YearLabels width={width}\n              height={height}\n              years={years}\n              scYearRadius={scYearRadius} />\n  <CentralLineChart width={width}\n                    height={height}\n                    data={data}\n                    selectedIso={selectedIso}\n                    radius={innerRadius} />\n  <CountryLabels width={width}\n                 height={height}\n                 data={data.map(d => ({iso: d.iso, country: d.country}))}\n                 scCountryAngle={scCountryAngle}\n                 radius={countryRadius}\n                 selectedIso={selectedIso} />\n  <CountryHighlighter width={width}\n                      height={height}\n                      data={data}\n                      years={years}\n                      scCountryAngle={scCountryAngle}\n                      scYearRadius={scYearRadius}\n                      scMortRate={scMortRate}\n                      scReduction={scReduction}\n                      selectedIso={selectedIso} />\n  <IsoDetector width={width}\n               height={height}\n               radius={scReduction.range()[1]}\n               scCountryAngle={scCountryAngle}\n               selectedIso={selectedIso}\n               on:isochanged />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scYearRadius;\n\n  const shrinkFactor = 0.62;\n  const lineThicknessFactor = 1.05;\n  const labelOffsetFactor = 1.1;\n\n  let arc, labelArc;\n\n  // The arcs\n  function defineArcs() {\n    const innerAreaRadius = scYearRadius(years[0]) * shrinkFactor;\n    arc = d3.arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius)\n      .outerRadius(innerAreaRadius * lineThicknessFactor)\n      .cornerRadius(7);\n\n    labelArc = d3.arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius * labelOffsetFactor)\n      .outerRadius(innerAreaRadius * labelOffsetFactor);\n  }\n\n  $: if (scYearRadius) defineArcs();\n</script>\n\n{#if data}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    {#each data as d}\n      <path class=\"continent-arc\" d={arc(d)}></path>\n      <path class=\"continent-label-arc\" id=\"continent-label-arc-{d.continent}\" d={labelArc(d)}></path>\n      <text>\n        <textPath class=\"continent-label\" href=\"#continent-label-arc-{d.continent}\" startOffset=\"25%\">\n          {d.continent}\n        </textPath>\n      </text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  path.continent-arc {\n    fill: var(--blue);\n  }\n  path.continent-label-arc {\n    fill: none;\n  }\n\n  textPath.continent-label {\n    fill: #A6D9F7;\n    text-anchor: middle;\n    font-family: Arial, sans-serif;\n    font-size: 0.7rem;\n  }\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let selectedIso;\n  export let radius;\n\n  let dataArr, xScale, yScale, line, yLabels;\n\n  function updateScalesAndGenerators(radius) {\n    xScale = d3.scaleLinear()\n      .domain(d3.extent([].concat(...data.map(d => d.dataArr)).map(d => d.year)))\n      .range([-radius / 1.5, radius / 1.5]);\n\n    yScale = d3.scaleLinear()\n      .domain([-10, d3.max([].concat(...data.map(d => d.dataArr)).map(d => d.value))])\n      .range([radius / 2, -radius / 2]);\n      \n    line = d3.line()\n      .x(d => xScale(d.year))\n      .y(d => yScale(d.value))\n      .curve(d3.curveCardinal);\n\n    yLabels = [\n      {\n        x: xScale(dataArr[0].year),\n        y: yScale(dataArr[0].value) - 10,\n        text: Math.round(dataArr[0].value)\n      },\n      {\n        x: xScale(dataArr[dataArr.length - 1].year),\n        y: yScale(dataArr[dataArr.length - 1].value) - 10,\n        text: Math.round(dataArr[dataArr.length - 1].value)\n      }\n    ];\n  }\n\n  $: if (data && selectedIso) dataArr = data.find(d => d.iso === selectedIso).dataArr.filter(d => !isNaN(d.value));\n  $: if (data && dataArr) updateScalesAndGenerators(radius);\n</script>\n\n{#if (data && selectedIso)}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    <text class=\"title\"\n          transform=\"translate(0 {yScale.range()[1] * 1.4})\">deaths / 1000 births</text>\n    <path d={line(dataArr)}\n          stroke=\"white\"\n          stroke-width=\"2\"\n          fill=\"none\"></path>\n    {#each yLabels as yLabel}\n      <text class=\"y-label\"\n            transform=\"translate({yLabel.x} {yLabel.y})\">{yLabel.text}</text>\n    {/each}\n    <line x1={xScale.range()[0]}\n          y1={yScale.range()[0]}\n          x2={xScale.range()[1]}\n          y2={yScale.range()[0]}></line>\n    {#each xScale.domain() as xLabel, i}\n      <text class=\"x-label\"\n            transform=\"translate({xScale(xLabel)} {yScale.range()[0] * 1.2})\"\n            text-anchor={i % 2 === 0 ? 'start' : 'end'}>{xLabel}</text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  text.title {\n    font-size: 0.6rem;\n    text-anchor: middle;\n    fill: white;\n  }\n\n  text.y-label {\n    font-size: 0.8rem;\n    text-anchor: middle;\n    fill: white;\n  }\n  \n  line {\n    stroke: white;\n    stroke-width: 1;\n  }\n\n  text.x-label {\n    font-size: 0.6rem;\n    fill: white;\n  }\n\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scMortRate;\n  export let scReduction;\n  export let selectedIso;\n\n  let reduction;\n  let container;\n  let modelYears, modelReduction;\n\n  function update(selectedIso) {\n    if (!selectedIso) {\n      modelYears = [];\n      reduction = 0;\n      modelReduction = [];\n    } else {\n      reduction = data.find(d => d.iso === selectedIso).reduction;\n      modelReduction = [{\n        cx: Math.sin(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        cy: Math.cos(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        r: Math.min(width, height) / 200\n      }];\n      modelYears = data.find(d => d.iso === selectedIso).dataArr.filter(d => years.includes(d.year)) || [];\n    }\n\n    // the three year highlighters\n    d3.select(container).selectAll('.year-circle')\n      .data(modelYears)\n      .join(enter => enter.append('circle')\n                      .attr('class', 'year-circle')\n                      .attr('fill', 'white')\n                      .attr('opacity', 0.4)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scMortRate(d.value))),\n            update => update.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scMortRate(d.value)),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n\n    // the reduction highlighter\n    d3.select(container).selectAll('.reduction-circle')\n      .data(modelReduction)\n      .join(enter => enter.append('circle')\n                      .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => d.cx)\n                        .attr('cy', d => d.cy)\n                        .attr('r', d => d.r)),\n            update => update\n                        .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                        .transition().duration(100)\n                          .attr('cx', d => d.cx)\n                          .attr('cy', d => d.cy)\n                          .attr('r', d => d.r),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n  }\n\n  $: if (container) update(selectedIso);\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\" bind:this={container}></g>\n\n<style>\n  :global(circle.increased) {\n    opacity: 1;\n    fill: var(--red);\n  }\n\n  :global(circle.decreased) {\n    opacity: 1;\n    fill: var(--blue);\n  }\n</style>\n",
    "<script>\n  export let width;\n  export let height;\n  export let years;\n  export let scYearRadius;\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\">\n  {#each years as year}\n    <text transform=\"translate(0 {-scYearRadius(year) + Math.min(width, height) / 30})\">{year}</text>\n  {/each}\n</g>\n\n<style>\n  text {\n    fill: var(--blue);\n    font-size: 0.6rem;\n    text-anchor: middle;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqCC,OAAO,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;ACmDA,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;ACnCD,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACVD,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACQD,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACbD,IAAI,cAAc,cAAC,CAAC,AAClB,IAAI,CAAE,IAAI,MAAM,CAAC,AACnB,CAAC,AACD,IAAI,oBAAoB,cAAC,CAAC,AACxB,IAAI,CAAE,IAAI,AACZ,CAAC,AAED,QAAQ,gBAAgB,cAAC,CAAC,AACxB,IAAI,CAAE,OAAO,CACb,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,KAAK,CAAC,CAAC,UAAU,CAC9B,SAAS,CAAE,MAAM,AACnB,CAAC;ACMD,IAAI,MAAM,cAAC,CAAC,AACV,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,MAAM,CACnB,IAAI,CAAE,KAAK,AACb,CAAC,AAED,IAAI,QAAQ,cAAC,CAAC,AACZ,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,MAAM,CACnB,IAAI,CAAE,KAAK,AACb,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,IAAI,QAAQ,cAAC,CAAC,AACZ,SAAS,CAAE,MAAM,CACjB,IAAI,CAAE,KAAK,AACb,CAAC;ACCO,gBAAgB,AAAE,CAAC,AACzB,OAAO,CAAE,CAAC,CACV,IAAI,CAAE,IAAI,KAAK,CAAC,AAClB,CAAC,AAEO,gBAAgB,AAAE,CAAC,AACzB,OAAO,CAAE,CAAC,CACV,IAAI,CAAE,IAAI,MAAM,CAAC,AACnB,CAAC;ACnFD,IAAI,cAAC,CAAC,AACJ,IAAI,CAAE,IAAI,MAAM,CAAC,CACjB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,MAAM,AACrB,CAAC"
}