{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../CookieBanner.svelte",
    "../../Flower.svelte",
    "../../CanvasVisual.svelte",
    "../../SVGVisualOver.svelte",
    "../../SVGVisualBelow.svelte",
    "../../Legend.svelte",
    "../../CountrySearch.svelte",
    "../../YearLabels.svelte",
    "../../CentralLineChart.svelte",
    "../../CountryHighlighter.svelte",
    "../../Continents.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import * as d3 from 'd3';\n\n  import CookieBanner from './CookieBanner.svelte';\n  import Flower from './flower/Flower.svelte';\n\n  const years = [1998, 2008, 2018];\n\n  let data;\n\n  async function load() {\n    data = await d3.csv('child_mortality.csv', d => { // /childhood-mortality\n      const dataArr = [];\n      const returnObj = {\n        iso: d.iso,\n        country: d.country,\n        reduction: +d.reduction,\n        continent: d.continent\n      };\n      for (let key in d) {\n        if (key.match('^19|^20')) dataArr.push({year: +key, value: +d[key]});\n      }\n      returnObj['dataArr'] = dataArr;\n      return returnObj;\n    });\n  }\n\n  load();\n</script>\n\n<div class=\"wrapper\">\n  <CookieBanner />\n  <div class=\"header\">\n    <h1>The circle of hope</h1>\n  </div>\n  <div id=\"visual\">\n    {#if data}\n      <Flower {data} {years} />\n    {/if}\n  </div>\n</div>\n\n<style>\n  .wrapper {\n    width: 95%;\n    height: 100%;\n    margin: 0 auto;\n  }\n\n  .header {\n    width: 100%;\n    margin: 1.5rem 0;\n    color: var(--blue);\n  }\n\n  .header h1 {\n    font-family: 'Ibarra Real Nova', serif;\n    font-weight: normal;\n    font-size: calc(3rem + 7px);\n    /* text-align: center; */\n  }\n\n  #visual {\n    position: relative;\n    width: 100%;\n    height: 100vmin;\n  }\n</style>\n",
    "<div id=\"cookies-eu-banner\">\n  Would be great to know where you all come from. So do you accept the use of cookies for Google Analytics?\n  <button id=\"cookies-eu-reject\">Reject</button>\n  <button id=\"cookies-eu-accept\">Accept</button>\n</div>\n\n<style>\n  #cookies-eu-banner {\n    position: absolute;\n    z-index: 1000;\n    bottom: 0;\n    left: 0;\n    display: none;\n    width: 100%;\n    padding: 1rem;\n    color: white;\n    font-family: 'Arial', sans-serif;\n    font-size: 1rem;\n    background-color: var(--red);\n  }\n\n  #cookies-eu-banner button {\n    position: relative;\n    margin: 0 0.1rem;\n    padding: 0.1rem;\n    font-size: 0.8rem;\n    border-radius: 0.2rem;\n    background-color: white;\n    text-decoration: none;\n    border: none;\n    outline: none;\n  }\n\n  #cookies-eu-banner button:hover {\n    cursor: pointer;\n  } \n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  import CanvasVisual from './CanvasVisual.svelte';\n  import SVGVisualBelow from './SVGVisualBelow.svelte';\n  import SVGVisualOver from './SVGVisualOver.svelte';\n  import CountrySearch from './CountrySearch.svelte';\n\n  import Legend from './Legend.svelte';\n\n  export let data;\n  export let years;\n\n  const offset = 10;\n  const angleOffset = 0;\n\n  let selectedIso;\n\n  // Dimensions\n  let rawWidth = offset;\n  let rawHeight = offset;\n\n  // Scales\n  let scYearColor, scCountryAngle, scYearRadius, scMortRate, scReduction;\n\n  function initScales(minDim) {\n    scYearColor = d3.scaleOrdinal()\n      .domain(years)\n      .range(['#F40000', 'rgb(236, 54, 9)', 'rgb(245, 120, 86)']);\n\n    scCountryAngle = d3.scaleOrdinal()\n      .domain(data.map(d => d.iso))\n      .range(d3.range(angleOffset, 2 * Math.PI - angleOffset, (2 * Math.PI - 2 * angleOffset) / data.length));\n\n    scYearRadius = d3.scaleLinear()\n      .domain([years[0], years[years.length - 1]])\n      .range([minDim / 5, minDim / 2.4 - padding]);\n\n    scMortRate = d3.scaleLinear()\n      .domain([0, 1.2 * d3.max([].concat(...data.map(d => d.dataArr.filter(d => years.includes(d.year)).map(d => d.value))))])\n      .range([0, minDim / 9]);\n\n    scReduction = d3.scaleLinear()\n      .domain(d3.extent(data.map(d => d.reduction)))\n      .range([Math.min(scYearRadius(years[years.length - 1]) + reductionOffset, minDim / 2 - padding), minDim / 2 - padding]);\n  }\n\n  $: width = rawWidth - offset;\n  $: height = rawHeight - offset;\n  $: minDim = Math.min(width, height);\n  $: padding = minDim / 40;\n  $: reductionOffset = minDim / 40;\n\n  $: if (data && years) initScales(minDim);\n</script>\n\n<svelte:body on:click={() => selectedIso = undefined}/>\n\n<div class=\"info\">\n  <div class=\"intro\">\n    <div class=\"text\">\n      5.3 million children under five <span class=\"red\">died</span> in 2018.\n      This is on average 15,000 children per day. However, the mortality rates are in fact declining.\n      Still 30 years ago, 12.5 million kids <span class=\"red\">died</span> before their fifth birthday.\n      Within the last 20 years, the mortality rates fell for every country in the world. Almost.\n    </div>\n    {#if (width > 600)}\n      <div class=\"search\">\n        <CountrySearch data={data}\n                      on:isochanged={(e) => selectedIso = e.detail}/>\n      </div>\n    {/if}\n  </div>\n  <div class=\"legend\">\n    <div class=\"text\">How to read this chart:</div>\n    <Legend data={data}\n            scMortRate={scMortRate} />\n    <div class=\"data-info\">Median under five-year mortality rates are taken from the <a href=\"https://data.unicef.org/topic/child-survival/under-five-mortality/\">official resource</a> of the UN Inter-agency Group for Child Mortality Estimation.</div>\n    <div class=\"imprint\">\n      <img src=\"logo.svg\" alt=\"higsch-logo\" />\n      Higsch Data Visuals,&nbsp; <a href=\"https://www.linkedin.com/in/matthias-stahl/\">Matthias Stahl</a>, 2020\n    </div>\n  </div>\n  {#if (width <= 600)}\n    <div class=\"search small\">\n      <CountrySearch data={data}\n                    on:isochanged={(e) => selectedIso = e.detail}/>\n    </div>\n  {/if}\n</div>\n<div class=\"wrapper\" bind:offsetWidth={rawWidth} bind:offsetHeight={rawHeight}>\n  {#if (minDim > 0)}\n  <SVGVisualBelow width={width}\n                  height={height}\n                  offset={offset}\n                  data={data}\n                  years={years}\n                  scCountryAngle={scCountryAngle}\n                  scYearRadius={scYearRadius}\n                  scReduction={scReduction} />\n  <CanvasVisual width={width}\n              height={height}\n              offset={offset}\n              data={data}\n              years={years}\n              scYearColor={scYearColor}\n              scCountryAngle={scCountryAngle}\n              scYearRadius={scYearRadius}\n              scMortRate={scMortRate}\n              selectedIso={selectedIso} />\n  <SVGVisualOver width={width}\n                 height={height}\n                 offset={offset}\n                 data={data}\n                 years={years}\n                 scCountryAngle={scCountryAngle}\n                 scYearRadius={scYearRadius}\n                 scReduction={scReduction}\n                 scMortRate={scMortRate}\n                 selectedIso={selectedIso}\n                 on:isochanged={(e) => selectedIso = e.detail} />\n  {/if}\n</div>\n\n<style>\n  .info {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: stretch;\n    justify-content: space-between;\n    width: 100%;\n    height: auto;\n    color: var(--blue);\n  }\n\n  .info > div {\n    width: 47%;\n    height: 100%;\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 600px) {\n    .info > div {\n      width: 100%;\n      margin-bottom: 1.5rem;\n    }\n  }\n\n  .intro {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .text {\n    text-align: justify;\n    line-height: 1.7;\n  }\n\n  .search {\n    display: flex;\n    flex-direction: column;\n    margin: 2rem 0 0 0;\n  }\n\n  .search.small {\n    align-items: center;\n  }\n  \n  .data-info {\n    font-size: 0.9rem;\n    font-style: italic;\n    line-height: 1.7;\n  }\n\n  .imprint {\n    display: flex;\n    margin: 1rem 0;\n    align-items: center;\n    font-size: 0.7rem;\n  }\n\n  .imprint img {\n    width: 1.7rem;\n    margin: 0 0.6rem 0 0;\n  }\n\n  .wrapper {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scYearColor;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scMortRate;\n  export let selectedIso;\n\n  const canvasScaleFactor = 2;\n\n  // Elements\n  let canvas, ctx;\n\n  function init() {\n    canvas.width = canvasScaleFactor * width;\n    canvas.height = canvasScaleFactor * height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.style.margin = `${offset / 2}px`;\n\n    ctx.scale(canvasScaleFactor, canvasScaleFactor);\n    ctx.translate(width / 2, height / 2);\n\n    ctx.globalCompositeOperation = 'luminosity';\n  }\n\n  function draw(width, height, selectedIso) {\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n    ctx.globalAlpha = selectedIso ? 0.1 : 0.4;\n\n    years.forEach(year => {\n      ctx.fillStyle = scYearColor(year);\n      data.forEach(d => {\n        const yearData = d.dataArr.find(d => d.year === year);\n        const x = Math.sin(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        const y = Math.cos(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        ctx.beginPath();\n        ctx.arc(x, y, scMortRate(yearData.value), 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    });\n  }\n\n  onMount(() => {\n    ctx = canvas.getContext('2d');\n  });\n\n  $: if (ctx) init(width, height);\n  $: if (ctx && data) draw(width, height, selectedIso);\n</script>\n\n<canvas class=\"canvas-visual\"\n        bind:this={canvas}></canvas>\n\n<style>\n  canvas {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import YearLabels from './YearLabels.svelte';\n  import CentralLineChart from './CentralLineChart.svelte';\n  import CountryLabels from './CountryLabels.svelte';\n  import CountryHighlighter from './CountryHighlighter.svelte';\n  import IsoDetector from './IsoDetector.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n  export let scMortRate;\n  export let selectedIso;\n\n  $: innerRadius = scYearRadius(years[0]) * 0.62;\n  $: countryRadius = scReduction.range()[1];\n</script>\n\n<svg class=\"svg-visual\"\n     width={width}\n     height={height}\n     style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <YearLabels width={width}\n              height={height}\n              years={years}\n              scYearRadius={scYearRadius} />\n  <CentralLineChart width={width}\n                    height={height}\n                    data={data}\n                    selectedIso={selectedIso}\n                    radius={innerRadius} />\n  <CountryLabels width={width}\n                 height={height}\n                 data={data.map(d => ({iso: d.iso, country: d.country}))}\n                 scCountryAngle={scCountryAngle}\n                 radius={countryRadius}\n                 selectedIso={selectedIso} />\n  <CountryHighlighter width={width}\n                      height={height}\n                      data={data}\n                      years={years}\n                      scCountryAngle={scCountryAngle}\n                      scYearRadius={scYearRadius}\n                      scMortRate={scMortRate}\n                      scReduction={scReduction}\n                      selectedIso={selectedIso} />\n  <IsoDetector width={width}\n               height={height}\n               radius={scReduction.range()[1]}\n               scCountryAngle={scCountryAngle}\n               selectedIso={selectedIso}\n               on:isochanged />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import Continents from './Continents.svelte';\n  import ReductionPath from './ReductionPath.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n\n  let continentsData;\n\n  function loadContinentsData() {\n    const uniqueContinents = [...new Set(data.map(d => d.continent))];\n    continentsData = uniqueContinents.map(continent => {\n      const raw = data.map(d => d.continent);\n      return {\n        startAngle: scCountryAngle(data[raw.indexOf(continent)].iso),\n        endAngle: scCountryAngle(data[raw.lastIndexOf(continent)].iso),\n        continent\n      };\n    });\n  }\n\n  // Prepare data for continent labels\n  $: if (data) loadContinentsData();\n</script>\n\n<svg class=\"svg-visual\"\n     width={width}\n     height={height}\n     style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <ReductionPath width={width}\n                 height={height}\n                 data={data}\n                 scCountryAngle={scCountryAngle}\n                 scReduction={scReduction} />\n  <Continents width={width}\n              height={height}\n              data={continentsData}\n              years={years}\n              scYearRadius={scYearRadius} />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let data;\n  export let scMortRate;\n\n  let width = 0;\n  let height = 0;\n  let mortalityCircles = [];\n  let titleHeight = 0;\n\n  let scalesSet = false;\n  let xScale, yScale, reductionPath;\n\n  $: mortalityCircles = [80, 40, 20, 10, 5].map((d, i, a) => {\n      return {\n        mortalityRate: d,\n        r: scMortRate(d),\n        cx: scMortRate(a.slice(0, i + 1).reduce((a, c) => a + c)) + scMortRate(a.slice(0, Math.max(i, 1)).reduce((a, c) => a + c)) - (i === 0 ? scMortRate(d) : 0) + i * 20,\n        cy: height / 2\n      };\n    });\n\n  function setupScales(width, height) {\n    if (width === 0 || height === 0) return;\n\n    xScale = d3.scaleLinear()\n      .domain([0, 10])\n      .range([mortalityCircles[mortalityCircles.length - 1].cx + width / 15, width - width / 20]);\n\n    yScale = d3.scaleLinear()\n      .domain(d3.extent(reductionData.map(d => d.reduction)))\n      .range([height * 2/3, height / 3]);\n\n    reductionPath = d3.line()\n      .x((_, i) => xScale(i))\n      .y(d => yScale(d.reduction))\n      .curve(d3.curveCardinal);\n  }\n\n  $: titleHeight = mortalityCircles[0].cy - mortalityCircles[0].r - 30;\n  $: reductionData = [...data.slice(55, 65), data[55]];\n  $: if (mortalityCircles && reductionData) setupScales(width, height);\n  $: if (xScale && yScale && reductionPath) scalesSet = true;\n\n</script>\n\n<div class=\"container\" bind:offsetWidth={width} bind:offsetHeight={height}>\n  <svg width=\"100%\" height=\"100%\">\n    {#if scalesSet}\n      <defs>\n        <linearGradient id=\"legend-reduction-gradient\"\n                        x1=\"0\"\n                        y1=\"100%\"\n                        x2=\"0\"\n                        y2=\"0\">\n          <stop offset=\"0\" stop-color=\"#A6D9F7\" />\n          <stop offset=\"0.40\" stop-color=\"#A6D9F7\" />\n          <stop offset=\"0.40\" stop-color=\"#F40000\" />\n          <stop offset=\"1\" stop-color=\"#F40000\" />\n        </linearGradient>\n      </defs>\n      <g class=\"titles\" transform=\"translate(0 {titleHeight})\">\n        <text>Deaths / 1,000 births</text>\n        <text transform=\"translate({xScale.range()[0]} 0)\">Deaths from 1998 to 2018</text>\n      </g>\n      <g class=\"mortality-circles\" transform=\"translate(0 0)\">\n        {#each mortalityCircles as d}\n          <circle class=\"mortality-circle\"\n                  cx={d.cx}\n                  cy={d.cy}\n                  r={d.r}></circle>\n          <text class=\"mortality-labels\" transform=\"translate({d.cx} {d.cy - d.r - 10})\">{d.mortalityRate}</text>\n        {/each}\n      </g>\n      <g class=\"reduction\">\n        <path class=\"reduction-path\"\n              d={reductionPath(reductionData)}\n              fill=\"url(#legend-reduction-gradient)\" />\n        <text class=\"reduction-label red\"\n              transform=\"translate({xScale.range()[0] + 5} {yScale.range()[1] + 15})\">increased</text>\n        <text class=\"reduction-label blue\"\n              transform=\"translate({xScale.range()[0] + 5} {yScale.range()[0] + 7})\">decreased</text>\n      </g>\n    {/if}\n  </svg>\n</div>\n\n<style>\n  .container {\n    max-width: 500px;\n  }\n\n  text {\n    fill: var(--blue);\n  }\n\n  g.titles {\n    font-size: 0.8rem;\n  }\n\n  circle.mortality-circle {\n    fill: var(--red);\n    stroke: none;\n    opacity: 1;\n  }\n\n  text.mortality-labels {\n    font-size: 0.7rem;\n    text-anchor: middle;\n  }\n\n  path.reduction-path {\n    stroke: none;\n  }\n\n  text.reduction-label {\n    font-size: 0.7rem;\n    text-anchor: start;\n  }\n\n  .red {\n    fill: var(--red);\n  }\n\n  .blue {\n    fill: var(--blue);\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  export let data = [];\n\n  const dispatch = createEventDispatcher();\n  \n  let searchString = '';\n\n  function handleSearch(searchString) {\n    const searchedObj = searchData.find(d => d.tobesearched.indexOf(searchString.toUpperCase()) >= 0);\n    if (searchString && searchedObj && searchedObj.iso) {\n      dispatch('isochanged', searchedObj.iso);\n    } else {\n      dispatch('isochanged', undefined);\n    }\n  }\n\n  $: searchData = data.map(d => ({iso: d.iso, tobesearched: `${d.iso}|${d.country}`.toUpperCase()}));\n\n  $: handleSearch(searchString);\n</script>\n\n<label for=\"country\">Search by country</label>\n<input id=\"country\"\n       name=\"country\"\n       autocomplete=\"off\"\n       type=\"search\"\n       placeholder=\"Country name\"\n       bind:value={searchString}\n       on:click|stopPropagation={() => handleSearch(searchString)} />\n\n<style>\n  label {\n    margin: 0 0 0.7rem 0;\n  }\n\n  input {\n    width: 55%;\n    min-width: 200px;\n    padding: 0.4rem;\n    font-size: 1.1rem;\n    color: var(--dark);\n    background-color: var(--blue);\n    border: none;\n    border-radius: 0.5vmin;\n  }\n</style>\n",
    "<script>\n  export let width;\n  export let height;\n  export let years;\n  export let scYearRadius;\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\">\n  {#each years as year}\n    <text transform=\"translate(0 {-scYearRadius(year) + Math.min(width, height) / 22})\">{year}</text>\n  {/each}\n</g>\n\n<style>\n  text {\n    fill: var(--blue);\n    font-size: 0.6rem;\n    text-anchor: middle;\n  }\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let selectedIso;\n  export let radius;\n\n  let dataArr, xScale, yScale, line, yLabels;\n\n  function updateScalesAndGenerators(radius) {\n    xScale = d3.scaleLinear()\n      .domain(d3.extent([].concat(...data.map(d => d.dataArr)).map(d => d.year)))\n      .range([-radius / 1.5, radius / 1.5]);\n\n    yScale = d3.scaleLinear()\n      .domain([-10, d3.max([].concat(...data.map(d => d.dataArr)).map(d => d.value))])\n      .range([radius / 2, -radius / 2]);\n      \n    line = d3.line()\n      .x(d => xScale(d.year))\n      .y(d => yScale(d.value))\n      .curve(d3.curveCardinal);\n\n    yLabels = [\n      {\n        x: xScale(dataArr[0].year) * 1.05,\n        y: yScale(dataArr[0].value) + Math.min(width, height) / 200,\n        text: Math.round(dataArr[0].value),\n        textAnchor: 'end'\n      },\n      {\n        x: xScale(dataArr[dataArr.length - 1].year) * 1.05,\n        y: yScale(dataArr[dataArr.length - 1].value) + Math.min(width, height) / 200,\n        text: Math.round(dataArr[dataArr.length - 1].value),\n        textAnchor: 'start'\n      }\n    ];\n  }\n\n  $: if (data && selectedIso) dataArr = data.find(d => d.iso === selectedIso).dataArr.filter(d => !isNaN(d.value));\n  $: if (data && dataArr) updateScalesAndGenerators(radius);\n</script>\n\n{#if (data && selectedIso)}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    <text class=\"title\"\n          transform=\"translate(0 {yScale.range()[1] * 1.4})\">deaths / 1000 births</text>\n    <path d={line(dataArr)}\n          stroke=\"white\"\n          stroke-width=\"2\"\n          fill=\"none\"></path>\n    {#each yLabels as yLabel}\n      <text class=\"y-label\"\n            transform=\"translate({yLabel.x} {yLabel.y})\"\n            text-anchor={yLabel.textAnchor}>{yLabel.text}</text>\n    {/each}\n    <line x1={xScale.range()[0]}\n          y1={yScale.range()[0]}\n          x2={xScale.range()[1]}\n          y2={yScale.range()[0]}></line>\n    {#each xScale.domain() as xLabel, i}\n      <text class=\"x-label\"\n            transform=\"translate({xScale(xLabel)} {yScale.range()[0] * 1.25})\"\n            text-anchor={i % 2 === 0 ? 'start' : 'end'}>{xLabel}</text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  text.title {\n    font-size: calc(0.4rem + 0.5vmin);\n    text-anchor: middle;\n    fill: white;\n  }\n\n  text.y-label {\n    font-size: 0.7rem;\n    fill: white;\n  }\n  \n  line {\n    stroke: white;\n    stroke-width: 1;\n  }\n\n  text.x-label {\n    font-size: 0.6rem;\n    fill: white;\n  }\n\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scMortRate;\n  export let scReduction;\n  export let selectedIso;\n\n  let reduction;\n  let container;\n  let modelYears, modelReduction;\n\n  function update(selectedIso) {\n    if (!selectedIso) {\n      modelYears = [];\n      reduction = 0;\n      modelReduction = [];\n    } else {\n      reduction = data.find(d => d.iso === selectedIso).reduction;\n      modelReduction = [{\n        cx: Math.sin(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        cy: Math.cos(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        r: Math.min(width, height) / 200\n      }];\n      modelYears = data.find(d => d.iso === selectedIso).dataArr.filter(d => years.includes(d.year)) || [];\n    }\n\n    // the three year highlighters\n    d3.select(container).selectAll('.year-circle')\n      .data(modelYears)\n      .join(enter => enter.append('circle')\n                      .attr('class', 'year-circle')\n                      .attr('fill', 'white')\n                      .attr('opacity', 0.6)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scMortRate(d.value))),\n            update => update.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scMortRate(d.value)),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n\n    // the reduction highlighter\n    d3.select(container).selectAll('.reduction-circle')\n      .data(modelReduction)\n      .join(enter => enter.append('circle')\n                      .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => d.cx)\n                        .attr('cy', d => d.cy)\n                        .attr('r', d => d.r)),\n            update => update\n                        .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                        .transition().duration(100)\n                          .attr('cx', d => d.cx)\n                          .attr('cy', d => d.cy)\n                          .attr('r', d => d.r),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n  }\n\n  $: if (container) update(selectedIso);\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\" bind:this={container}></g>\n\n<style>\n  :global(circle.increased) {\n    opacity: 1;\n    fill: var(--red);\n  }\n\n  :global(circle.decreased) {\n    opacity: 1;\n    fill: var(--blue);\n  }\n</style>\n",
    "<script>\n  import * as d3 from 'd3';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scYearRadius;\n\n  const shrinkFactor = 0.62;\n  const lineThicknessFactor = 1.05;\n  const labelOffsetFactor = 1.1;\n\n  let arc, labelArc;\n\n  // The arcs\n  function defineArcs() {\n    const innerAreaRadius = scYearRadius(years[0]) * shrinkFactor;\n    arc = d3.arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius)\n      .outerRadius(innerAreaRadius * lineThicknessFactor)\n      .cornerRadius(7);\n\n    labelArc = d3.arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius * labelOffsetFactor)\n      .outerRadius(innerAreaRadius * labelOffsetFactor);\n  }\n\n  $: if (scYearRadius) defineArcs();\n</script>\n\n{#if data}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    {#each data as d}\n      <path class=\"continent-arc\" d={arc(d)}></path>\n      <path class=\"continent-label-arc\" id=\"continent-label-arc-{d.continent}\" d={labelArc(d)}></path>\n      <text>\n        <textPath class=\"continent-label\" href=\"#continent-label-arc-{d.continent}\" startOffset=\"25%\">\n          {d.continent}\n        </textPath>\n      </text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  path.continent-arc {\n    fill: var(--blue);\n  }\n  path.continent-label-arc {\n    fill: none;\n  }\n\n  textPath.continent-label {\n    fill: #A6D9F7;\n    text-anchor: middle;\n    font-family: Arial, sans-serif;\n    font-size: 0.6rem;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}